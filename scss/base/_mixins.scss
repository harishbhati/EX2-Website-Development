//hover
@mixin hover {
    &:hover { @content; }
  }

//button mixin
@mixin button-variant(
    $color,
    $border-color,
    $background-color,
    $hover-background: darken($background-color, 10%),
    $hover-border : darken($border-color, 10%)
    ) 
    {
        color: $color;
        border-color: $border-color;
        background-color: $background-color;
        @include hover {
            background-color: $hover-background;
            border-color: $hover-border;
        }
    }



//flex mixins
@mixin d-flex($properties) {
    @if $properties == 'flex' {
        display: -ms-flexbox;
        display: -webkit-flex;
        display: flex;
    } @else if $properties == 'inline-flex' {
        display: -ms-inline-flexbox;
        display: -webkit-inline-flex;
        display: inline-flex;
    }
}

@mixin flex_wrap($properties) {
    @if $properties == 'nowrap' {
        -webkit-flex-wrap: nowrap;
        -ms-flex-wrap: nowrap;
        flex-wrap: nowrap;
    } @else if $properties == 'wrap' {
        -webkit-flex-wrap: wrap;
        -ms-flex-wrap: wrap;
        flex-wrap: wrap;
    } @else if $properties == 'wrap-reverse' {
        -webkit-flex-wrap: wrap-reverse;
        -ms-flex-wrap: wrap-reverse;
        flex-wrap: wrap-reverse;
    }
}
@mixin flex_direction($properties) {
    @if $properties == 'column' {
        -webkit-flex-direction: column;
        -ms-flex-direction: column;
        flex-direction: column;
    } @else if $properties == 'row' {
        -webkit-flex-direction: row;
        -ms-flex-direction: row;
        flex-direction: row;
    }
}

@mixin flex_justify($properties) {
    @if $properties == 'flex-start' {
        -webkit-justify-content: flex-start;
        -ms-flex-pack: start;
        justify-content: flex-start;
    } @else if $properties == 'flex-end' {
        -webkit-justify-content: flex-end;
        -ms-flex-pack: end;
        justify-content: flex-end;
    } @else if $properties == 'center' {
        -webkit-justify-content: center;
        -ms-flex-pack: center;
        justify-content: center;
    } @else if $properties == 'space-between' {
        -webkit-justify-content: space-between;
        -ms-flex-pack: justify;
        justify-content: space-between;
    } @else if $properties == 'space-around' {
        -webkit-justify-content: space-around;
        -ms-flex-pack: distribute;
        justify-content: space-around;
    }
}

@mixin flex_align_content($properties) {
    @if $properties == 'flex-start' {
        -webkit-align-content: flex-start;
        -ms-flex-line-pack: start;
        align-content: flex-start;
    } @else if $properties == 'flex-end' {
        -webkit-align-content: flex-end;
        -ms-flex-line-pack: end;
        align-content: flex-end;
    } @else if $properties == 'center' {
        -webkit-align-content: center;
        -ms-flex-line-pack: center;
        align-content: center;
    } @else if $properties == 'space-between' {
        -webkit-align-content: space-between;
        -ms-flex-line-pack: justify;
        align-content: space-between;
    } @else if $properties == 'space-around' {
        -webkit-align-content: space-around;
        -ms-flex-line-pack: distribute;
        align-content: space-around;
    } @else if $properties == 'stretch' {
        -webkit-align-content: stretch;
        -ms-flex-line-pack: stretch;
        align-content: stretch;
    }
}

@mixin flex_align_items($properties) {
    @if $properties == 'flex-start' {
        -webkit-align-items: flex-start;
        -ms-flex-align: start;
        align-items: flex-start;
    } @else if $properties == 'flex-end' {
        -webkit-align-items: flex-end;
        -ms-flex-align: end;
        align-items: flex-end;
    } @else if $properties == 'center' {
        -webkit-align-items: center;
        -ms-flex-align: center;
        align-items: center;
    } @else if $properties == 'baseline' {
        -webkit-align-items: baseline;
        -ms-flex-align: baseline;
        align-items: baseline;
    } @else if $properties == 'stretch' {
        -webkit-align-items: stretch;
        -ms-flex-align: stretch;
        align-items: stretch;
    }
}

@mixin flex_align_self($properties) {
    @if $properties == 'auto' {
        -webkit-align-self: auto;
        -ms-flex-item-align: auto;
        align-self: auto;
    } @else if $properties == 'flex-start' {
        -webkit-align-self: flex-start;
        -ms-flex-item-align: start;
        align-self: flex-start;
    } @else if $properties == 'flex-end' {
        -webkit-align-self: flex-end;
        -ms-flex-item-align: end;
        align-self: flex-end;
    } @else if $properties == 'center' {
        -webkit-align-self: center;
        -ms-flex-item-align: center;
        align-self: center;
    } @else if $properties == 'baseline' {
        -webkit-align-self: baseline;
        -ms-flex-item-align: baseline;
        align-self: baseline;
    } @else if $properties == 'stretch' {
        -webkit-align-self: stretch;
        -ms-flex-item-align: stretch;
        align-self: stretch;
    }
}

@mixin flex_basis($properties) {
    -webkit-flex-basis: $properties;
    flex-basis: $properties;
}

@mixin flex($properties) {
    -webkit-flex: $properties;
    flex: $properties;
}

@mixin flex_center {
    @include d-flex(flex);
    @include flex_align_items(center);
    @include flex_justify(center);
}

@mixin flex_center_between {
    @include d-flex(flex);
    @include flex_align_items(center);
    @include flex_justify(space-between);
}
//flex mixins    

// flex helper class
.d-flex {
    @include d-flex(flex);
    @include flex_wrap(wrap);
}
.flex-column{
    @include flex_direction(column);
}
.flex-row{
    @include flex_direction(row);
}
.align-items-center {
    @include flex_align_items(center);
}

.flex-space-between{
    @extend %justify-content-between;
}

.flex{
    @include flex(1)
}
.flex-center{
    @include flex_center
}

%justify-content-center {
    @extend .d-flex;
    @include flex_justify(center);
}
%justify-content-between {
    @extend .d-flex;
    @include flex_justify(space-between);
}

//media query
@mixin for-size($size) {
    @if $size == phone-only {
        @media (min-width: 320px) { @content; }
    } 
    @else if $size == phone-landscape-up {
        @media (min-width: 480px) { @content; }
    } 
    @else if $size == tablet {
        @media (min-width: 768px) { @content; }
    } 
    @else if $size == desktop-up {
        @media (min-width: 1025px) { @content; }
    } 
    @else if $size == phone-max {
        @media (max-width: 767px) { @content; }
    } 
}

//media query for Max-Width
@mixin max-width-for($size) {
    @if $size == phone {
        @media (max-width: 767px) { @content; }
    } 
    @else if $size == tablet {
        @media (max-width: 1024px) { @content; }
    } 
    @else if $size == desktop-up {
        @media (max-width: 1366px) { @content; }
    } 
}
//hexagone
.hexagone {
    height: 230px;
    width: calc(230px * 0.57735);
    background: #27aae1;
    position: relative;
    margin: 0 auto;
    transform: rotate(90deg);
    -webkit-transform: rotate(90deg);
    &:before,
    &:after {
      position: absolute;
      top: 0;
      right: calc((100% / 2) - ((230px * 0.57735) / 2));
      background-color: inherit;
      height: inherit;
      width: inherit;
      content: "";
    }
    &:before {
      transform: rotateZ(-60deg);
      -webkit-transform: rotateZ(-60deg);
    }
    &:after {
      transform: rotateZ(60deg);
      -webkit-transform: rotateZ(60deg);
    }
    .inner-div{
        position: relative;
        z-index: 1;
        transform: rotate(-90deg);
        -webkit-transform: rotate(-90deg);
    }
  }
